@model testLogin.Models.Restaurant

@{
    ViewBag.Title = "Edit";
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript"
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD8vm8eg1hK4jMG8C-vyIn1U4qOGLEw-IA">
</script>
<script type="text/javascript">
    var marker;
    var lat = document.getElementById('latitude');
    var long = document.getElementById('longitude');
    function initialize() {
        var myLatlng = new google.maps.LatLng(lat.value, long.value);
        var mapOptions = {
            center: { lat: 53.3243201, lng: -6.251695 },
            zoom: 11
        };
        var map = new google.maps.Map(document.getElementById('map-canvas'),
            mapOptions);

        placeMarker(myLatlng, map);

        google.maps.event.addListener(map, 'click', function (e) {
            if (!marker) {
                placeMarker(e.latLng, map);
            }
            else {
                marker.setPosition(e.latLng);
            }
            lat.value = e.latLng.lat();
            long.value = e.latLng.lng();

        });
    }

    function placeMarker(position, map) {
        marker = new google.maps.Marker({
            position: position,
            map: map
        });
        map.panTo(position);
    }

    google.maps.event.addDomListener(window, 'load', initialize);
</script>

    <script>

        $(document).ready(function () {
            var image = document.getElementById('appImage');
            var imageLink = image.value;
            $('#fileToUpload').val(imageLink);

            $('.btn-file :file').on('fileselect', function (event, numFiles, label) {
                console.log(numFiles);
                console.log(label);
                $('#fileToUpload').val(label);
                image.value = label;
            });

            $(document).on('change', '.btn-file :file', function () {
                var input = $(this),
                    numFiles = input.get(0).files ? input.get(0).files.length : 1,
                    label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
                input.trigger('fileselect', [numFiles, label]);

            });
            // Connect to 'change' event in order to toggle glyphs
            $("[type='checkbox']").change(function () {
                if ($(this).prop('checked')) {
                    $(this).prev().addClass('glyphicon-ok-circle');
                    $(this).prev().removeClass('glyphicon-unchecked');
                }
                else {
                    $(this).prev().removeClass('glyphicon-ok-circle');
                    $(this).prev().addClass('glyphicon-unchecked');
                }
            });
        });
    </script>
}
<style>
    .btn-file {
        position: relative;
        overflow: hidden;
    }

        .btn-file input[type=file] {
            position: absolute;
            top: 0;
            right: 0;
            min-width: 100%;
            min-height: 100%;
            font-size: 100px;
            text-align: right;
            filter: alpha(opacity=0);
            opacity: 0;
            outline: none;
            background: white;
            cursor: inherit;
            display: block;
        }
</style>

<div class="row">
    <div class="col-md-4"></div>
    <div class="col-md-6">
        @using (Html.BeginForm("Edit", "Restaurants", FormMethod.Post,
                            new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <div style="text-align:center; padding-top:20px;">
                    <h4>Change Restaurant Details</h4>
                    <p>You can easily make any changes you want to your restaurant details here. Click Save below to confirm the changes, or Back to cancel.</p>
                </div>
                
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.id)
                @Html.HiddenFor(model => model.appImage)
                @Html.HiddenFor(model => model.latitude)
                @Html.HiddenFor(model => model.longitude)

                <div class="form-group">
                    @Html.LabelFor(model => model.restaurantName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.restaurantName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.restaurantName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div id="map-canvas" style="height: 400px;width:100%; margin: 0; padding: 0;"></div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-2">Extra Options: </label>
                    <div class="col-md-10">
                        <div class="btn-group" data-toggle="buttons">

                            @if (Model.wifi == true)
                            {
                                <label class="btn btn-primary active">
                                    <span class="glyphicon glyphicon-ok-circle"></span>
                                    @Html.CheckBoxFor(model => model.wifi) WiFi zone
                                </label>

                            }
                            else
                            {
                                <label class="btn btn-primary">
                                    <span class="glyphicon glyphicon-unchecked"></span>
                                    @Html.CheckBoxFor(model => model.wifi) WiFi zone
                                </label>
                            }
                            @if (Model.wheelchair == true)
                            {
                                <label class="btn btn-primary active">
                                    <span class="glyphicon glyphicon-ok-circle"></span>
                                    @Html.CheckBoxFor(model => model.wheelchair) Wheelchair Accessibilty
                                </label>
                            }
                            else
                            {

                                <label class="btn btn-primary">
                                    <span class="glyphicon glyphicon-unchecked"></span>
                                    @Html.CheckBoxFor(model => model.wheelchair) Wheelchair Accessibilty
                                </label>
                            }
                            @if (Model.vegan == true)
                            {
                                <label class="btn btn-primary active">
                                    <span class="glyphicon glyphicon-ok-circle"></span>
                                    @Html.CheckBoxFor(model => model.vegan) Vegan Options
                                </label>
                            }
                            else
                            {
                                <label class="btn btn-primary  ">
                                    <span class="glyphicon glyphicon-unchecked"></span>
                                    @Html.CheckBoxFor(model => model.vegan) Vegan Options
                                </label>
                            }

                        </div>

                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.type1, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">

                        <select class="form-control" for="type1" name="type1" id="type1">
                            <option label="Select..."></option>
                            <option>American</option>
                            <option>BBQ</option>
                            <option>Chinese</option>
                            <option>Family Friendly</option>
                            <option>Healthy Option</option>
                            <option>Indian</option>
                            <option>Italian</option>
                            <option>Portuguese</option>
                            <option>Seafood</option>
                            <option>Something Different</option>
                            <option>Steakhouse</option>
                            <option>Thai</option>
                            <option>Traditional</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.type1, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.type2, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">

                        <select class="form-control" for="type2" name="type2" id="type2">
                            <option label="Select..."></option>
                            <option>American</option>
                            <option>BBQ</option>
                            <option>Chinese</option>
                            <option>Family Friendly</option>
                            <option>Healthy Option</option>
                            <option>Indian</option>
                            <option>Italian</option>
                            <option>Portuguese</option>
                            <option>Seafood</option>
                            <option>Something Different</option>
                            <option>Steakhouse</option>
                            <option>Thai</option>
                            <option>Traditional</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.type2, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.type3, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">

                        <select class="form-control" for="type3" name="type3" id="type3">
                            <option label="Select..."></option>
                            <option>American</option>
                            <option>BBQ</option>
                            <option>Chinese</option>
                            <option>Family Friendly</option>
                            <option>Healthy Option</option>
                            <option>Indian</option>
                            <option>Italian</option>
                            <option>Portuguese</option>
                            <option>Seafood</option>
                            <option>Something Different</option>
                            <option>Steakhouse</option>
                            <option>Thai</option>
                            <option>Traditional</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.type3, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.bio, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.bio, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.bio, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.openClose, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.openClose, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.openClose, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.phoneNum, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.phoneNum, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.phoneNum, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-2">Restaurant image: </label>
                    <div class="input-group">
                        <span class="input-group-btn">
                            <span class="btn btn-primary btn-file">
                                Browse… <input type="file" name="fileToUpload">
                            </span>
                        </span>
                        <input type="text" id="fileToUpload" class="form-control">
                    </div>
                    <p>Note: Your restaurant image is stored in the cloud, and is accessible using the link in the field above.</p>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <div class="btn-group">
                            @Html.ActionLink("Back", "Index", new { id = "backButton" }, new { @class = "btn btn-primary" })
                            <input type="submit" value="Save" class="btn btn-success" />
                        </div>
                    </div>
                </div>
            </div>


        }

        <div>

        </div>
    </div>
    <div class="col-md-2"></div>
</div>


